package com.karunesh.microservices.currencyconversionservice;

import java.math.BigDecimal;
import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class CurrencyConversionController {
	
	@Autowired
	private CurrencyExchangeProxy proxy;
	
	@GetMapping("currency-conversion/from/{from}/to/{to}/quantity/{quantity}")
	public CurrencyConversion calculateCurrencyConversion(@PathVariable(value = "from") String from, 
			@PathVariable(value = "to") String to, @PathVariable(value = "quantity") BigDecimal quantity) {
		
		
		HashMap<String,String> uriVariables = new HashMap<String, String>();
		uriVariables.put("from", from);
		uriVariables.put("to", to);
		
		
		ResponseEntity<CurrencyConversion> respoonseEntity = new RestTemplate().getForEntity(
				"http://localhost:8000/currency-exchange/from/{from}/to/{to}", 
				CurrencyConversion.class, uriVariables);
		CurrencyConversion currencyConversion = respoonseEntity.getBody();
		return new CurrencyConversion(currencyConversion.getId(),from,to, quantity,currencyConversion.getConversionMultiple(),
				currencyConversion.getConversionMultiple().multiply(quantity),"8100");
	}
	
	@GetMapping("currency-conversion-feign/from/{from}/to/{to}/quantity/{quantity}")
	public CurrencyConversion calculateCurrencyConversionfeign(@PathVariable(value = "from") String from, 
			@PathVariable(value = "to") String to, @PathVariable(value = "quantity") BigDecimal quantity) {
		CurrencyConversion currencyConversion = proxy.retriveExchangedValues(from, to);
		
		return new CurrencyConversion(currencyConversion.getId(),from,to, quantity,currencyConversion.getConversionMultiple(),
				currencyConversion.getConversionMultiple().multiply(quantity),currencyConversion.getEnviorment());
	}

}
